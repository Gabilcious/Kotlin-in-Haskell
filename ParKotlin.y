-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParKotlin where
import AbsKotlin
import LexKotlin
import ErrM

}

%name pProg Prog
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!!' { PT _ (TS _ 2) }
  '!=' { PT _ (TS _ 3) }
  '%' { PT _ (TS _ 4) }
  '%=' { PT _ (TS _ 5) }
  '&&' { PT _ (TS _ 6) }
  '(' { PT _ (TS _ 7) }
  ')' { PT _ (TS _ 8) }
  '*' { PT _ (TS _ 9) }
  '*=' { PT _ (TS _ 10) }
  '+' { PT _ (TS _ 11) }
  '++' { PT _ (TS _ 12) }
  '+=' { PT _ (TS _ 13) }
  ',' { PT _ (TS _ 14) }
  '-' { PT _ (TS _ 15) }
  '--' { PT _ (TS _ 16) }
  '-=' { PT _ (TS _ 17) }
  '->' { PT _ (TS _ 18) }
  '..' { PT _ (TS _ 19) }
  '/' { PT _ (TS _ 20) }
  '/=' { PT _ (TS _ 21) }
  ':' { PT _ (TS _ 22) }
  ';' { PT _ (TS _ 23) }
  '<' { PT _ (TS _ 24) }
  '<=' { PT _ (TS _ 25) }
  '=' { PT _ (TS _ 26) }
  '==' { PT _ (TS _ 27) }
  '>' { PT _ (TS _ 28) }
  '>=' { PT _ (TS _ 29) }
  '?' { PT _ (TS _ 30) }
  '?.let' { PT _ (TS _ 31) }
  'Array' { PT _ (TS _ 32) }
  'Bool' { PT _ (TS _ 33) }
  'Int' { PT _ (TS _ 34) }
  'String' { PT _ (TS _ 35) }
  'Tupla' { PT _ (TS _ 36) }
  'Unit' { PT _ (TS _ 37) }
  '[' { PT _ (TS _ 38) }
  ']' { PT _ (TS _ 39) }
  'break' { PT _ (TS _ 40) }
  'continue' { PT _ (TS _ 41) }
  'downTo' { PT _ (TS _ 42) }
  'else' { PT _ (TS _ 43) }
  'false' { PT _ (TS _ 44) }
  'for' { PT _ (TS _ 45) }
  'fun' { PT _ (TS _ 46) }
  'if' { PT _ (TS _ 47) }
  'in' { PT _ (TS _ 48) }
  'null' { PT _ (TS _ 49) }
  'print' { PT _ (TS _ 50) }
  'println' { PT _ (TS _ 51) }
  'return' { PT _ (TS _ 52) }
  'run' { PT _ (TS _ 53) }
  'step' { PT _ (TS _ 54) }
  'true' { PT _ (TS _ 55) }
  'until' { PT _ (TS _ 56) }
  'val' { PT _ (TS _ 57) }
  'var' { PT _ (TS _ 58) }
  'while' { PT _ (TS _ 59) }
  '{' { PT _ (TS _ 60) }
  '||' { PT _ (TS _ 61) }
  '}' { PT _ (TS _ 62) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }
  L_ident  { PT _ (TV $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

String  :: { String }
String   : L_quoted {  $1 }

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Prog :: { Prog }
Prog : ListInst { AbsKotlin.Program (reverse $1) }
Exp :: { Exp }
Exp : Exp OpAssign Exp1 { AbsKotlin.Eassign $1 $2 $3 }
    | Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp3 '?' Exp1 ':' Exp2 { AbsKotlin.Eternary $1 $3 $5 }
     | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '||' Exp3 { AbsKotlin.Eor $1 $3 } | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '&&' Exp4 { AbsKotlin.Eand $1 $3 } | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '==' Exp5 { AbsKotlin.Eeq $1 $3 }
     | Exp4 '!=' Exp5 { AbsKotlin.Eneq $1 $3 }
     | Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '<' Exp6 { AbsKotlin.El $1 $3 }
     | Exp5 '>' Exp6 { AbsKotlin.Eg $1 $3 }
     | Exp5 '<=' Exp6 { AbsKotlin.Ele $1 $3 }
     | Exp5 '>=' Exp6 { AbsKotlin.Ege $1 $3 }
     | Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp6 '+' Exp7 { AbsKotlin.Eadd $1 $3 }
     | Exp6 '-' Exp7 { AbsKotlin.Esub $1 $3 }
     | Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp7 '*' Exp8 { AbsKotlin.Emul $1 $3 }
     | Exp7 '/' Exp8 { AbsKotlin.Ediv $1 $3 }
     | Exp7 '%' Exp8 { AbsKotlin.Emod $1 $3 }
     | Exp8 { $1 }
Exp8 :: { Exp }
Exp8 : '-' Exp8 { AbsKotlin.Eneg $2 }
     | '!' Exp8 { AbsKotlin.Elneg $2 }
     | '++' Exp12 { AbsKotlin.Einc $2 }
     | '--' Exp12 { AbsKotlin.Edec $2 }
     | Exp9 { $1 }
Exp9 :: { Exp }
Exp9 : Exp12 '++' { AbsKotlin.EPinc $1 }
     | Exp12 '--' { AbsKotlin.EPdec $1 }
     | Exp10 { $1 }
Exp10 :: { Exp }
Exp10 : 'Tupla' '(' ListExp ')' { AbsKotlin.Etupla $3 }
      | Integer { AbsKotlin.Eint $1 }
      | String { AbsKotlin.Estring $1 }
      | 'true' { AbsKotlin.Etrue }
      | 'false' { AbsKotlin.Efalse }
      | 'null' { AbsKotlin.Enull }
      | FunctionExp { AbsKotlin.Ecall $1 }
      | Ident ListDimExp { AbsKotlin.Eget $1 $2 }
      | '{' ListArg '->' ListStm '}' { AbsKotlin.Elambda $2 (reverse $4) }
      | Exp11 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '!!' { AbsKotlin.Ennass $1 } | Exp12 { $1 }
Exp12 :: { Exp }
Exp12 : Ident { AbsKotlin.Evar $1 } | '(' Exp ')' { $2 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
DimExp :: { DimExp }
DimExp : '[' Exp ']' { AbsKotlin.Dim $2 }
ListDimExp :: { [DimExp] }
ListDimExp : DimExp { (:[]) $1 } | DimExp ListDimExp { (:) $1 $2 }
OpAssign :: { OpAssign }
OpAssign : '=' { AbsKotlin.OpAssign1 }
         | '+=' { AbsKotlin.OpAssign2 }
         | '-=' { AbsKotlin.OpAssign3 }
         | '*=' { AbsKotlin.OpAssign4 }
         | '/=' { AbsKotlin.OpAssign5 }
         | '%=' { AbsKotlin.OpAssign6 }
BaseType :: { BaseType }
BaseType : 'Tupla' '<' ListType '>' { AbsKotlin.Ttupla $3 }
         | 'Bool' { AbsKotlin.Tbool }
         | 'Int' { AbsKotlin.Tint }
         | 'String' { AbsKotlin.Tstring }
RetType :: { RetType }
RetType : 'Unit' { AbsKotlin.TRunit }
        | Type { AbsKotlin.TRtype $1 }
Type :: { Type }
Type : BaseType '?' { AbsKotlin.Tnullable $1 }
     | BaseType { AbsKotlin.Tnonnull $1 }
     | '(' ListType ')' '->' RetType { AbsKotlin.Tfun $2 $5 }
ListType :: { [Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
Arg :: { Arg }
Arg : Ident ':' Type { AbsKotlin.Args $1 $3 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Stm :: { Stm }
Stm : Dec { AbsKotlin.Sdec $1 }
    | Exp ';' { AbsKotlin.Sexp $1 }
    | 'run' '{' ListStm '}' { AbsKotlin.Sblock (reverse $3) }
    | 'for' '(' Ident 'in' Iterable ')' '{' ListStm '}' { AbsKotlin.Sfor $3 $5 (reverse $8) }
    | 'while' '(' Exp ')' '{' ListStm '}' { AbsKotlin.Swhile $3 (reverse $6) }
    | 'break' ';' { AbsKotlin.Sbreak }
    | 'continue' ';' { AbsKotlin.Scont }
    | 'return' Exp ';' { AbsKotlin.Sretexp $2 }
    | 'return' ';' { AbsKotlin.Sret }
    | 'if' '(' Exp ')' '{' ListStm '}' { AbsKotlin.Sif $3 (reverse $6) }
    | 'if' '(' Exp ')' '{' ListStm '}' 'else' '{' ListStm '}' { AbsKotlin.Sifelse $3 (reverse $6) (reverse $10) }
    | 'print' '(' Exp ')' ';' { AbsKotlin.Sprint $3 }
    | 'println' '(' Exp ')' ';' { AbsKotlin.Sprintln $3 }
    | Exp '?.let' '{' ListStm '}' { AbsKotlin.Snotnull $1 (reverse $4) }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Inst :: { Inst }
Inst : Dec { AbsKotlin.Idec $1 }
ListInst :: { [Inst] }
ListInst : {- empty -} { [] } | ListInst Inst { flip (:) $1 $2 }
Dec :: { Dec }
Dec : FunctionDec { AbsKotlin.Dfun $1 }
    | ArrayDec { AbsKotlin.Darray $1 }
    | 'var' Ident ':' Type '=' Exp ';' { AbsKotlin.Dvar $2 $4 $6 }
    | 'val' Ident ':' Type '=' Exp ';' { AbsKotlin.Dval $2 $4 $6 }
    | 'var' Ident ':' Type ';' { AbsKotlin.Dvarnull $2 $4 }
    | 'val' Ident ':' Type ';' { AbsKotlin.Dvalnull $2 $4 }
FunctionDec :: { FunctionDec }
FunctionDec : 'fun' Ident '(' ListArg ')' ':' RetType '{' ListStm '}' { AbsKotlin.FunDec $2 $4 $7 (reverse $9) }
FunctionExp :: { FunctionExp }
FunctionExp : Ident '(' ListExp ')' { AbsKotlin.FunCall $1 $3 }
Iterable :: { Iterable }
Iterable : Ident { AbsKotlin.Itarray $1 }
         | Exp '..' Exp { AbsKotlin.Itrange $1 $3 }
         | Exp 'until' Exp { AbsKotlin.Itup $1 $3 }
         | Exp 'downTo' Exp { AbsKotlin.Itdown $1 $3 }
         | Exp 'until' Exp 'step' Exp { AbsKotlin.Itupst $1 $3 $5 }
         | Exp 'downTo' Exp 'step' Exp { AbsKotlin.Itdownst $1 $3 $5 }
ArrayDec :: { ArrayDec }
ArrayDec : 'val' Ident '=' 'Array' '(' Exp ',' Exp ')' ';' { AbsKotlin.ArrDec $2 $6 $8 }
         | 'val' Ident '=' '[' Iterable ']' ';' { AbsKotlin.ArrItDec $2 $5 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

