module SkelKotlin where

-- Haskell module generated by the BNF converter

import AbsKotlin
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProg :: Prog -> Result
transProg x = case x of
  Program insts -> failure x
transExp :: Exp -> Result
transExp x = case x of
  Eassign exp1 opassign exp2 -> failure x
  Eternary exp1 exp2 exp3 -> failure x
  Eor exp1 exp2 -> failure x
  Eand exp1 exp2 -> failure x
  Eeq exp1 exp2 -> failure x
  Eneq exp1 exp2 -> failure x
  El exp1 exp2 -> failure x
  Eg exp1 exp2 -> failure x
  Ele exp1 exp2 -> failure x
  Ege exp1 exp2 -> failure x
  Eadd exp1 exp2 -> failure x
  Esub exp1 exp2 -> failure x
  Emul exp1 exp2 -> failure x
  Ediv exp1 exp2 -> failure x
  Emod exp1 exp2 -> failure x
  Eneg exp -> failure x
  Elneg exp -> failure x
  Einc exp -> failure x
  Edec exp -> failure x
  EPinc exp -> failure x
  EPdec exp -> failure x
  Etupla exps -> failure x
  Eint integer -> failure x
  Estring string -> failure x
  Etrue -> failure x
  Efalse -> failure x
  Enull -> failure x
  Ecall functionexp -> failure x
  Eget ident dimexps -> failure x
  Elambda lambda -> failure x
  Ennass exp -> failure x
  Evar ident -> failure x
transDimExp :: DimExp -> Result
transDimExp x = case x of
  Dim exp -> failure x
transOpAssign :: OpAssign -> Result
transOpAssign x = case x of
  OpAssign1 -> failure x
  OpAssign2 -> failure x
  OpAssign3 -> failure x
  OpAssign4 -> failure x
  OpAssign5 -> failure x
transBaseType :: BaseType -> Result
transBaseType x = case x of
  Ttupla types -> failure x
  Tbool -> failure x
  Tint -> failure x
  Tstring -> failure x
transType :: Type -> Result
transType x = case x of
  Tunit -> failure x
  Tnull basetype -> failure x
  Tnonnull basetype -> failure x
  Tfun types basetype -> failure x
transArg :: Arg -> Result
transArg x = case x of
  Args ident type_ -> failure x
transStm :: Stm -> Result
transStm x = case x of
  Sdec dec -> failure x
  Sexp exp -> failure x
  Sblock stms -> failure x
  Sfor ident iterable stms -> failure x
  Swhile exp stms -> failure x
  Sbreak -> failure x
  Scont -> failure x
  Sretexp exp -> failure x
  Sret -> failure x
  Sif exp stms -> failure x
  Sifelse exp stms1 stms2 -> failure x
  Sprint exp -> failure x
  Sprintln exp -> failure x
  Snotnull exp stm -> failure x
transInst :: Inst -> Result
transInst x = case x of
  Idec dec -> failure x
transDec :: Dec -> Result
transDec x = case x of
  Dfun functiondec -> failure x
  Darray arraydec -> failure x
  Dvar ident type_ exp -> failure x
  Dval ident type_ exp -> failure x
  Dvarnull ident type_ -> failure x
  Dvalnull ident type_ -> failure x
transFunctionDec :: FunctionDec -> Result
transFunctionDec x = case x of
  FunDec ident args type_ stms -> failure x
transFunctionExp :: FunctionExp -> Result
transFunctionExp x = case x of
  FunCall ident exps -> failure x
transLambda :: Lambda -> Result
transLambda x = case x of
  LambdaRet args stms exp -> failure x
  LambdaNoRet args stms -> failure x
transIterable :: Iterable -> Result
transIterable x = case x of
  Itarray ident -> failure x
  Itrange exp1 exp2 -> failure x
  Itup exp1 exp2 -> failure x
  Itdown exp1 exp2 -> failure x
  Itupst exp1 exp2 exp3 -> failure x
  Itdownst exp1 exp2 exp3 -> failure x
transArrayDec :: ArrayDec -> Result
transArrayDec x = case x of
  ArrDec ident exp1 exp2 -> failure x

